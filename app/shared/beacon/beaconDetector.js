"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const observable_1 = require("data/observable");
const nativescript_ibeacon_common_1 = require("nativescript-ibeacon/nativescript-ibeacon.common");
const nativescript_ibeacon_1 = require("nativescript-ibeacon");
const application_settings_1 = require("application-settings");
class BeaconDetector extends observable_1.Observable {
    constructor(beaconService, presenceService) {
        super();
        this.regions = [];
        this.beaconService = beaconService;
        this.presenceService = presenceService;
        console.log('Constructor of BeaconDetector');
        let options = {
            iOSAuthorisationType: nativescript_ibeacon_common_1.BeaconLocationOptionsIOSAuthType.Always,
            androidAuthorisationType: nativescript_ibeacon_common_1.BeaconLocationOptionsAndroidAuthType.Coarse,
            androidAuthorisationDescription: "Location permission needed"
        };
        this.nativescriptIbeacon = new nativescript_ibeacon_1.NativescriptIbeacon(this, options);
        this.beaconService.getListBeacons().subscribe(beaconsList => {
            beaconsList.forEach(item => {
                console.log("constructor" + item.id_beacon);
                this.regions.push(new nativescript_ibeacon_common_1.BeaconRegion(item.id_beacon.toString(), item.beacon.proximityUUID, item.beacon.major, item.beacon.minor));
            });
            this.start();
        });
    }
    getIdRegion() {
        return this.id_region;
    }
    start() {
        if (!this.nativescriptIbeacon.isAuthorised()) {
            console.log("NOT Authorised");
            this.nativescriptIbeacon.requestAuthorization()
                .then(() => {
                console.log("Authorised by the user");
                this.nativescriptIbeacon.bind();
            }, (e) => {
                console.log("Authorisation denied by the user");
            });
        }
        else {
            console.log("Already authorised");
            this.nativescriptIbeacon.bind();
        }
    }
    stop() {
        this.regions.forEach(region => {
            this.nativescriptIbeacon.stopMonitoring(region);
        });
        this.nativescriptIbeacon.unbind();
    }
    onBeaconManagerReady() {
        console.log("onBeaconManagerReady");
        this.regions.forEach(region => {
            this.nativescriptIbeacon.startMonitoring(region);
            this.id_region = parseInt(region.identifier);
            console.log("onBeaconManagerReady" + region.identifier);
        });
    }
    didRangeBeaconsInRegion(region, beacons) {
    }
    didFailRangingBeaconsInRegion(region, errorCode, errorDescription) {
    }
    didEnterRegion(region) {
        console.log('Did enter Region ' + region.identifier);
        this.presenceService.markPresence(parseInt(region.identifier), application_settings_1.getNumber("id", 0)).subscribe(() => { console.log("marked present"); }, (error) => { alert("error has occured"); });
    }
    didExitRegion(region) {
        console.log('Did leave Region ' + region.identifier);
    }
}
exports.BeaconDetector = BeaconDetector;
//# sourceMappingURL=data:application/json;base64,